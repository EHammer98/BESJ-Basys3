----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 02/24/2022 12:37:14 PM
-- Design Name: 
-- Module Name: sprites - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity sprites is
    Port( 
        reset:      in std_logic;
        clk25:      in std_logic;
        enable:     in std_logic;
        b1:         in std_logic;
        b2:         in std_logic;
        location:   in integer;
        hsprite:    out std_logic_vector(9 downto 0) := "0010010000";
        vsprite:    out std_logic_vector(9 downto 0) := "0000011111";
        ColoursOut: out std_logic_vector(2 downto 0)
    );
end sprites;

architecture Behavioral of sprites is
type ROMtype is array (0 to 399) of STD_LOGIC_VECTOR(2 downto 0);

Constant SpaceshipRed: ROMtype := 
(--   0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15     16   17    18    19
    "000","000","000","000","000","000","000","000","000","111","111","000","000","000","000","000","000","000","000","000", -- 0
    "000","000","000","000","000","000","000","000","000","111","111","000","000","000","000","000","000","000","000","000", -- 1
    "000","000","000","000","000","000","000","000","000","111","111","000","000","000","000","000","000","000","000","000", -- 2
    "000","000","000","000","000","000","000","000","000","111","111","000","000","000","000","000","000","000","000","000", -- 3
    "000","000","000","000","000","000","000","000","111","111","111","111","000","000","000","000","000","000","000","000", -- 4
    "000","000","000","000","000","000","000","000","111","111","111","111","000","000","000","000","000","000","000","000", -- 5
    "000","000","000","000","000","000","000","000","111","111","111","111","000","000","000","000","000","000","000","000", -- 6
    "000","000","100","000","000","000","000","111","111","111","111","111","111","000","000","000","000","100","000","000", -- 7
    "000","000","100","000","000","111","111","111","111","100","100","111","111","111","111","000","000","100","000","000", -- 8
    "100","000","111","000","111","111","111","111","111","100","100","111","111","111","111","111","000","111","000","100", -- 9
    "100","000","111","111","111","111","111","111","100","100","100","100","111","111","111","111","111","111","000","100", -- 10 
    "111","000","111","111","111","111","111","111","100","111","111","100","111","111","111","111","111","111","000","111", -- 11
    "111","000","111","111","111","111","111","111","111","111","111","111","111","111","111","111","111","111","000","111", -- 12
    "111","000","111","111","111","111","111","111","111","111","111","111","111","111","111","111","111","111","000","111", -- 13
    "111","111","111","111","111","111","100","111","111","111","111","111","111","100","111","111","111","111","111","111", -- 14
    "111","111","111","111","111","111","100","111","111","111","111","111","111","100","111","111","111","111","111","111", -- 15
    "111","111","111","111","111","100","100","111","111","111","111","111","111","100","100","111","111","111","111","111", -- 16
    "111","111","111","000","000","100","100","000","000","111","111","000","000","100","100","000","000","111","111","111", -- 17
    "111","111","000","000","000","000","000","000","000","111","111","000","000","000","000","000","000","000","111","111", -- 18
    "111","000","000","000","000","000","000","000","000","000","000","000","000","000","000","000","000","000","000","111"  -- 19
);

signal tmp_h: std_logic_vector(9 downto 0) := "0010010000"; --144
signal new_h: std_logic_vector(9 downto 0) := "0010010000"; --144
signal control: std_logic := '0'; 

begin

    process(clk25, reset)
    begin
    if reset = '1' then
        tmp_h <= "0010010000"; --144
        new_h <= "0010010000"; --144
        hsprite <= new_h;
        vsprite <= "0010010000";
    elsif rising_edge(clk25) then          
            if b1 = '1' and b2 = '0' and control = '0' then
                if tmp_h > 164 then
                tmp_h <= tmp_h - 20;
                control <= '1';
                end if;
            end if;
        
            if b1 = '0' and b2 = '1' and control = '0' then
                if tmp_h < 764 then
                tmp_h <= tmp_h + 20;
                control <= '1';
                end if;
            end if;
            
        if enable = '1' then
            new_h <= tmp_h;
            control <= '0'; 
        end if;
    
    hsprite <= new_h;
    vsprite <= "0010010000";
    end if;   
    
    end process;
    
    ColoursOut <= spaceshipRed(location);

end Behavioral;